import express from 'express'
import mongoose from 'mongoose'
import multer from 'multer';
import uploadToCloudinary from './uploadToCloudinary.js';
import cors from 'cors';
import teacherModel from './models/Teacher.model.js'
import fs from 'fs';
import csv from 'csv-parser';
import generateCredentials from './generateEmailAndPass.js';
import admin from "../firestore/firebaseAdmin.js"
import subjectModel from './models/Subject.model.js';
import classModel from './models/Class.model.js';
import SubjectModel from './models/Subject.model.js';
import StudentModel from './models/Student.model.js';
import { Types } from 'mongoose';


const upload = multer({ dest: 'uploads/' }); 
const app = express()
const port = 3000
app.use(express.json());
app.use(cors())

const dbLink = "mongodb+srv://poojan9603:poojan9603@cluster0.knjmpn6.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
mongoose.connect(dbLink, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {console.log("connected MongoDB")})
.catch((err) => {console.log("failed to connect MongoDB", err)});



app.post('/add-user', upload.single('file'), async (req, res, next) => {
    try {
      const localFilePath = req.file.path;
      const cloudinaryRes = await uploadToCloudinary(localFilePath);
      console.log(cloudinaryRes);
      const user = new User({ name: req.body.name, email: req.body.email });
      await user.save();
      res.json({ message: '✅ User saved to DB', user });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  });



    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






  app.get('/api/teachers', async (req,res) => {
    try {
      
    
    const teachers = await teacherModel.find()
    .populate('subjects')
    .populate('classes');

    res.json(teachers)
  } catch (err) {
    console.error("❌ Error fetching teachers:", err);
    res.status(500).json({ error: "Failed to fetch teachers" });
  }
});

  app.post('/api/teachers', upload.single('file'), async (req, res) => {
    try {
      if (req.file) {
        // 🌟 Case 1: CSV Upload
        const localFilePath = req.file.path;
        const results = [];
  
        fs.createReadStream(localFilePath)
          .pipe(csv())
          .on('data', (row) => {
            const { username, email, password } = generateCredentials(row.name, 'uic');
            results.push({
              name: row.name || '',
              email,
              username,
              password,
              subjects: [],
              classes: [],
              role: 'teacher'
            });
          })
          .on('end', async () => {
            try {
              await teacherModel.insertMany(results);
              fs.unlinkSync(localFilePath);
              res.json({ message: "✅ CSV data inserted", count: results.length });

              // Add Firebase Authentication Users meaning add their email and password
              // to firebase auth so that they can login to the app

              for (const teacher of results){
               try {
                  await admin.auth().createUser({
                    email: teacher.email,
                    password: teacher.password,
                  });
                } catch (err) {
                  console.error("❌ Firebase Auth Error:", err);
                  res.status(500).json({ error: "Failed to create Firebase Auth user" });
                }
              }

            } catch (err) {
              console.error("❌ InsertMany Error:", err);
              res.status(500).json({ error: "Failed to insert CSV data" });
            }
          });
      } else {
        // 🧾 Case 2: Manual Form Entry
        const { name } = req.body;
        const { username, email, password } = generateCredentials(name, 'uic');
  
        const teacher = new teacherModel({
          name,
          username,
          email,
          password,
          subjects: req.body.subject || [],
          classes: req.body.class || [],
          role: 'teacher'
        });
  
        await teacher.save();

        await
        admin.auth().createUser({
          email: teacher.email,
          password: teacher.password,
        })
        res.json({ message: "✅ Manual teacher saved", teacher });
      }
    } catch (err) {
      console.error("❌ General Error:", err);
      res.status(500).json({ error: err.message });
    }
  });


//   app.put('/api/teachers/:id', async (req, res) => {
    
//     // const teacherId = new mongoose.Types.ObjectId(req.params.id);

//     const teacherId = req.params.id;

//     const classId = req.body.classes.map((c) => c.id);

//     const subjectId = req.body.subjects.map((s) => s.id);

//     const teacherObjectId = new mongoose.Types.ObjectId(teacherId);

//     const prevSubjects = await subjectModel.find({teacher: teacherObjectId}, "_id");

//     const prevClasses = await classModel.find({teacher: teacherObjectId}, "_id");

//     const prevSubjectsId = prevSubjects.map((s) => s._id);
//     const prevClassesId = prevClasses.map((c) => c._id);

//     const classesToRemove = prevClassesId.filter((id) => !classId.includes(id))
// // 
//     const subjectsToRemove = prevSubjectsId.filter((id) => !subjectId.includes(id))



//     await subjectModel.updateMany(
//       {_id: {$in: subjectsToRemove }},
//       {$unset: {teacher: "" }}
//     );

//     await classModel.updateMany(
//       {_id: {$in: classesToRemove}},
//       {$unset: {teacher: "" }}
//     );

//     await subjectModel.updateMany(
//       {id: {$in: subjectId}},
//       {$set: {teacher: teacherId}}
//     )

//     await classModel.updateMany(
//       {id: {$in: classId}},
//       {$set: {teacher: teacherId}}
//     )

//   //   console.log("Teacher ID:", teacherId);
//   //   console.log("New class IDs:", classId);
//   //   console.log("New subject IDs:", subjectId);
//   //   console.log("Prev class IDs:", prevClassesId);
//   //   console.log("Prev subject IDs:", prevSubjectsId);
//   //   console.log("Classes to remove:", classesToRemove);
//   //   console.log("Subjects to remove:", subjectsToRemove);
//   //   // console.log("Request body:", classModel.find({}, { teacher: 1 }).pretty());


//   })




  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





app.put('/api/teachers/:id', async (req, res) => {
  const teacherId = req.params.id;
  const classIds = req.body.classes.map(c => c.id); // or c._id
  const subjectIds = req.body.subjects.map(s => s.id); // or s._id

  const teacherObjectId = new mongoose.Types.ObjectId(teacherId);

  // Get previous assignments
  const prevClasses = await classModel.find({ teacher: teacherObjectId }, "_id");
  const prevSubjects = await subjectModel.find({ teacher: teacherObjectId }, "_id");

  const prevClassIds = prevClasses.map(doc => doc._id);
  const prevSubjectIds = prevSubjects.map(doc => doc._id);

  // Detect removals
  const classesToRemove = prevClassIds.filter(id => !classIds.includes(id));
  const subjectsToRemove = prevSubjectIds.filter(id => !subjectIds.includes(id));

  // Remove teacher from removed classes
  await classModel.updateMany(
    { _id: { $in: classesToRemove } },
    { $pull: { teacher: null } }
  );

  // Remove teacher from removed subjects
  await subjectModel.updateMany(
    { _id: { $in: subjectsToRemove } },
    { $pull: { teacher: null } }
  );

  // Add teacher to selected classes
  await classModel.updateMany(
    { _id: { $in: classIds } },
    { $addToSet: { teacher: teacherObjectId } }
  );

  // Add teacher to selected subjects
  await subjectModel.updateMany(
    { _id: { $in: subjectIds } },
    { $addToSet: { teacher: teacherObjectId } }
  );

  res.status(200).json({ message: "✅ Teacher updated" });
});





app.delete('/api/teachers/:id', async (req, res) => {
  const teacherId = req.params.id;

  try {
    // Remove teacher from classes and subjects
    await teacherModel.findByIdAndDelete(teacherId);
    res.status(200).json({ message: "✅ Teacher deleted successfully" });
  } catch (error) { 
    console.error("❌ Error deleting teacher:", error);
    res.status(500).json({ error: "Failed to delete teacher" });
  }
    
})









app.post('/api/courses', async(req, res) => {
    const {courseName, courseTeacher, courseClass, courseDescription} = req.body;

    const course = new subjectModel({
      name: courseName,
      teacher: courseTeacher,
      description: courseDescription
    });

    await course.save();
    res.json({message: "✅ Course saved", course});

})




app.get('/api/courses', async(req,res) => {
  const courses = await subjectModel.find()
  .populate('teacher')
  .populate('classes');

  
  
  res.json(courses);
})


app.put('/api/courses/:id', async (req, res) => {
  const courseId = req.params.id;
  // const { name, teacher, description } = req.body;

  const updatedCourse = await subjectModel.findByIdAndUpdate(
    courseId, 
    req.body,
    { new: true } 
  );
  res.json({ message: "✅ Course updated", course: updatedCourse });

})


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.get("/api/classes", async(req, res) => {
  const classes = await classModel.find()
  .populate('teacher')
  .populate('subjects')

  res.json(classes)
})



app.post('/api/classes', async(req,res) => {
  const {className, classTeacher, classSubject} = req.body;

  const classInfo = new classModel({
    name: className,
    teacher: classTeacher,
    subjects: classSubject,
    
  });

  console.log("This is what server says on post /api/classes req ", classInfo)

  await classInfo.save();


})

app.put('/api/classes/:id', async(req,res) => {
  await classModel.findByIdAndUpdate(req.params.id, req.body, {new: true})
  res.json(classModel)
})

app.delete('/api/classes/:id', async (req, res) => {
  await classModel.findByIdAndDelete(req.params.id);
      res.status(200).json({ message: "Class deleted successfully" });

})


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.get('/api/students', async (req, res) => {
  const students = await mongoose.model('Student').find()
    .populate('class')
    .populate('subjects');
  res.json(students);
});

app.post('/api/students', async (req, res) => {
  const {name, email, classId, subjects} = req.body;

  const student = new StudentModel({
    name,
    email,
    class: classId ? new mongoose.Types.ObjectId(classId) : null,
    subjects: subjects ? subjects.map(sub => new mongoose.Types.ObjectId(sub)) : []
  });
  await student.save();
  res.json({ message: "✅ Student added", student });

});



app.put('/api/students/:id', async (req, res) => {
  const studentId = req.params.id;
  const {name, email, subjects} = req.body;
  const classId = req.body.class

  await StudentModel.findByIdAndUpdate(studentId, req.body, { new: true });
  res.json({ message: "✅ Student updated" });

})

app.delete('/api/students/:id', async (req, res) => {
  const studentId = req.params.id;
  await StudentModel.findByIdAndDelete(studentId);
  res.status(200).json({ message: "✅ Student deleted successfully" });
})



  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

