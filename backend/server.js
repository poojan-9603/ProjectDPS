import express from 'express'
import mongoose from 'mongoose'
import multer from 'multer';
import uploadToCloudinary from './uploadToCloudinary.js';
import cors from 'cors';
import teacherModel from './models/Teacher.model.js'
import fs from 'fs';
import csv from 'csv-parser';
import generateCredentials from './generateEmailAndPass.js';
import admin from "../firestore/firebaseAdmin.js"
import subjectModel from './models/Subject.model.js';
import classModel from './models/Class.model.js'


const upload = multer({ dest: 'uploads/' }); 
const app = express()
const port = 3000
app.use(express.json());
app.use(cors())

const dbLink = "mongodb+srv://poojan9603:poojan9603@cluster0.knjmpn6.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
mongoose.connect(dbLink, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {console.log("connected MongoDB")})
.catch((err) => {console.log("failed to connect MongoDB", err)});



app.post('/add-user', upload.single('file'), async (req, res, next) => {
    try {
      const localFilePath = req.file.path;
      const cloudinaryRes = await uploadToCloudinary(localFilePath);
      console.log(cloudinaryRes);
      const user = new User({ name: req.body.name, email: req.body.email });
      await user.save();
      res.json({ message: '✅ User saved to DB', user });
    } catch (err) {
      res.status(500).json({ error: err.message });
    }
  });

  app.get('/api/teachers', async (req,res) => {
    try {
      
    
    const teachers = await teacherModel.find()
    .populate('subjects')
    .populate('classes');

    res.json(teachers)
  } catch (err) {
    console.error("❌ Error fetching teachers:", err);
    res.status(500).json({ error: "Failed to fetch teachers" });
  }
});

  app.post('/api/teachers', upload.single('file'), async (req, res) => {
    try {
      if (req.file) {
        // 🌟 Case 1: CSV Upload
        const localFilePath = req.file.path;
        const results = [];
  
        fs.createReadStream(localFilePath)
          .pipe(csv())
          .on('data', (row) => {
            const { username, email, password } = generateCredentials(row.name, 'uic');
            results.push({
              name: row.name || '',
              email,
              username,
              password,
              subjects: [],
              classes: [],
              role: 'teacher'
            });
          })
          .on('end', async () => {
            try {
              await teacherModel.insertMany(results);
              fs.unlinkSync(localFilePath);
              res.json({ message: "✅ CSV data inserted", count: results.length });

              // Add Firebase Authentication Users meaning add their email and password
              // to firebase auth so that they can login to the app

              for (const teacher of results){
               try {
                  await admin.auth().createUser({
                    email: teacher.email,
                    password: teacher.password,
                  });
                } catch (err) {
                  console.error("❌ Firebase Auth Error:", err);
                  res.status(500).json({ error: "Failed to create Firebase Auth user" });
                }
              }

            } catch (err) {
              console.error("❌ InsertMany Error:", err);
              res.status(500).json({ error: "Failed to insert CSV data" });
            }
          });
      } else {
        // 🧾 Case 2: Manual Form Entry
        const { name } = req.body;
        const { username, email, password } = generateCredentials(name, 'uic');
  
        const teacher = new teacherModel({
          name,
          username,
          email,
          password,
          subjects: req.body.subject || [],
          classes: req.body.class || [],
          role: 'teacher'
        });
  
        await teacher.save();

        await
        admin.auth().createUser({
          email: teacher.email,
          password: teacher.password,
        })
        res.json({ message: "✅ Manual teacher saved", teacher });
      }
    } catch (err) {
      console.error("❌ General Error:", err);
      res.status(500).json({ error: err.message });
    }
  });
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.post('/api/courses', async(req, res) => {
    const {courseName, courseTeacher, courseClass, courseDescription} = req.body;

    const course = new subjectModel({
      name: courseName,
      teacher: courseTeacher,
      description: courseDescription
    });

    await course.save();
    res.json({message: "✅ Course saved", course});

})




app.get('/api/courses', async(req,res) => {
  const courses = await subjectModel.find()
  .populate('teacher')
  .populate('classes');
  
  res.json(courses);
})



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




app.post('/api/classes', async(req,res) => {
  const {className, classTeacher, classSubject, classStudent} = req.body;

  const classInfo = new classModel({
    className,
    classTeacher,
    classSubject,
    classStudent
  });

  await classInfo.save();


})

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})
